/*
 *	@file		DisplayConfigDefine.h
 *	@data		2013-6-9 10:40
 *	@author		zhu qing quan
 *	@brief		关于显示器输出配置的类型定义
 *  @Copyright	(C) 2013, by Ragile Corporation
 */
//%(PreprocessorDefinitions)  %(AdditionalIncludeDirectories)

#ifndef _WINGDI_

#define QDC_ALL_PATHS                   0x00000001
#define QDC_ONLY_ACTIVE_PATHS           0x00000002
#define QDC_DATABASE_CURRENT            0x00000004

//
// Definitions used by SetDisplayConfig.
//

#define SDC_TOPOLOGY_INTERNAL           0x00000001
#define SDC_TOPOLOGY_CLONE              0x00000002
#define SDC_TOPOLOGY_EXTEND             0x00000004
#define SDC_TOPOLOGY_EXTERNAL           0x00000008
#define SDC_TOPOLOGY_SUPPLIED           0x00000010
#define SDC_USE_DATABASE_CURRENT        (SDC_TOPOLOGY_INTERNAL | SDC_TOPOLOGY_CLONE | SDC_TOPOLOGY_EXTEND | SDC_TOPOLOGY_EXTERNAL)

#define SDC_USE_SUPPLIED_DISPLAY_CONFIG 0x00000020
#define SDC_VALIDATE                    0x00000040
#define SDC_APPLY                       0x00000080
#define SDC_NO_OPTIMIZATION             0x00000100
#define SDC_SAVE_TO_DATABASE            0x00000200
#define SDC_ALLOW_CHANGES               0x00000400
#define SDC_PATH_PERSIST_IF_REQUIRED    0x00000800
#define SDC_FORCE_MODE_ENUMERATION      0x00001000
#define SDC_ALLOW_PATH_ORDER_CHANGES    0x00002000

typedef enum  {
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER                  = -1,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15                   = 0,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO                 = 1,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO        = 2,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO        = 3,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI                    = 4,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI                   = 5,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS                   = 6,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN                  = 8,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI                    = 9,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL   = 10,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED   = 11,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL           = 12,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED           = 13,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE             = 14,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL               = 0x80000000,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32           = 0xFFFFFFFF 
} DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY;

typedef enum  {
	DISPLAYCONFIG_ROTATION_IDENTITY       = 1,
	DISPLAYCONFIG_ROTATION_ROTATE90       = 2,
	DISPLAYCONFIG_ROTATION_ROTATE180      = 3,
	DISPLAYCONFIG_ROTATION_ROTATE270      = 4,
	DISPLAYCONFIG_ROTATION_FORCE_UINT32   = 0xFFFFFFFF 
} DISPLAYCONFIG_ROTATION;

typedef enum  {
	DISPLAYCONFIG_SCALING_IDENTITY                 = 1,
	DISPLAYCONFIG_SCALING_CENTERED                 = 2,
	DISPLAYCONFIG_SCALING_STRETCHED                = 3,
	DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX   = 4,
	DISPLAYCONFIG_SCALING_CUSTOM                   = 5,
	DISPLAYCONFIG_SCALING_PREFERRED                = 128,
	DISPLAYCONFIG_SCALING_FORCE_UINT32             = 0xFFFFFFFF 
} DISPLAYCONFIG_SCALING;
typedef struct DISPLAYCONFIG_RATIONAL {
	UINT32 Numerator;
	UINT32 Denominator;
} DISPLAYCONFIG_RATIONAL;
typedef enum  {
	DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED                  = 0,
	DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE                  = 1,
	DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED                   = 2,
	DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST   = DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED,
	DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST   = 3,
	DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32                 = 0xFFFFFFFF 
} DISPLAYCONFIG_SCANLINE_ORDERING;

typedef enum  {
	DISPLAYCONFIG_PIXELFORMAT_8BPP           = 1,
	DISPLAYCONFIG_PIXELFORMAT_16BPP          = 2,
	DISPLAYCONFIG_PIXELFORMAT_24BPP          = 3,
	DISPLAYCONFIG_PIXELFORMAT_32BPP          = 4,
	DISPLAYCONFIG_PIXELFORMAT_NONGDI         = 5,
	DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32   = 0xffffffff 
} DISPLAYCONFIG_PIXELFORMAT;
typedef enum  {
	DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE         = 1,
	DISPLAYCONFIG_MODE_INFO_TYPE_TARGET         = 2,
	DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32   = 0xFFFFFFFF 
} DISPLAYCONFIG_MODE_INFO_TYPE;

typedef enum  {
	DISPLAYCONFIG_TOPOLOGY_INTERNAL       = 0x00000001,
	DISPLAYCONFIG_TOPOLOGY_CLONE          = 0x00000002,
	DISPLAYCONFIG_TOPOLOGY_EXTEND         = 0x00000004,
	DISPLAYCONFIG_TOPOLOGY_EXTERNAL       = 0x00000008,
	DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32   = 0xFFFFFFFF 
} DISPLAYCONFIG_TOPOLOGY_ID;

typedef struct DISPLAYCONFIG_PATH_TARGET_INFO {
	LUID                                  adapterId;
	UINT32                                id;
	UINT32                                modeInfoIdx;
	DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY outputTechnology;
	DISPLAYCONFIG_ROTATION                rotation;
	DISPLAYCONFIG_SCALING                 scaling;
	DISPLAYCONFIG_RATIONAL                refreshRate;
	DISPLAYCONFIG_SCANLINE_ORDERING       scanLineOrdering;
	BOOL                                  targetAvailable;
	UINT32                                statusFlags;
} DISPLAYCONFIG_PATH_TARGET_INFO;
typedef struct DISPLAYCONFIG_PATH_SOURCE_INFO {
	LUID   adapterId;
	UINT32 id;
	UINT32 modeInfoIdx;
	UINT32 statusFlags;
} DISPLAYCONFIG_PATH_SOURCE_INFO;
typedef struct DISPLAYCONFIG_PATH_INFO {
	DISPLAYCONFIG_PATH_SOURCE_INFO sourceInfo;
	DISPLAYCONFIG_PATH_TARGET_INFO targetInfo;
	UINT32                         flags;
} DISPLAYCONFIG_PATH_INFO;
typedef struct DISPLAYCONFIG_2DREGION {
	UINT32 cx;
	UINT32 cy;
} DISPLAYCONFIG_2DREGION;
typedef struct DISPLAYCONFIG_VIDEO_SIGNAL_INFO {
	UINT64                          pixelRate;
	DISPLAYCONFIG_RATIONAL          hSyncFreq;
	DISPLAYCONFIG_RATIONAL          vSyncFreq;
	DISPLAYCONFIG_2DREGION          activeSize;
	DISPLAYCONFIG_2DREGION          totalSize;
	UINT32                          videoStandard;
	DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering;
} DISPLAYCONFIG_VIDEO_SIGNAL_INFO;

typedef struct DISPLAYCONFIG_TARGET_MODE {
	DISPLAYCONFIG_VIDEO_SIGNAL_INFO targetVideoSignalInfo;
} DISPLAYCONFIG_TARGET_MODE;

typedef struct DISPLAYCONFIG_SOURCE_MODE {
	UINT32                    width;
	UINT32                    height;
	DISPLAYCONFIG_PIXELFORMAT pixelFormat;
	POINTL                    position;
} DISPLAYCONFIG_SOURCE_MODE;

typedef struct DISPLAYCONFIG_MODE_INFO {
	DISPLAYCONFIG_MODE_INFO_TYPE infoType;
	UINT32                       id;
	LUID                         adapterId;
	union {
		DISPLAYCONFIG_TARGET_MODE targetMode;
		DISPLAYCONFIG_SOURCE_MODE sourceMode;
	};
} DISPLAYCONFIG_MODE_INFO;

#endif

typedef LONG (WINAPI *SETDISPLAYCONFIGFUNC)(__in      UINT32 numPathArrayElements,
											__in_opt  DISPLAYCONFIG_PATH_INFO *pathArray,
											__in      UINT32 numModeInfoArrayElements,
											__in_opt  DISPLAYCONFIG_MODE_INFO *modeInfoArray,
											__in      UINT32 Flags
											);
typedef LONG (WINAPI *GETDISPLAYBUFFERSIZESFUNC)(
	__in   UINT32 Flags,
	__out  UINT32 *pNumPathArrayElements,
	__out  UINT32 *pNumModeInfoArrayElements
	);
typedef LONG (WINAPI *SETDISPLAYCONFIGFUNC)(__in      UINT32 numPathArrayElements,
										__in_opt  DISPLAYCONFIG_PATH_INFO *pathArray,
										__in      UINT32 numModeInfoArrayElements,
										__in_opt  DISPLAYCONFIG_MODE_INFO *modeInfoArray,
										__in      UINT32 Flags
										);
typedef LONG (WINAPI *QUERYDISPLAYCONFIGFUNC)(
	__in       UINT32 Flags,
	__inout    UINT32 *pNumPathArrayElements,
	__out      DISPLAYCONFIG_PATH_INFO *pPathInfoArray,
	__inout    UINT32 *pNumModeInfoArrayElements,
	__out      DISPLAYCONFIG_MODE_INFO *pModeInfoArray,
	__out_opt  DISPLAYCONFIG_TOPOLOGY_ID *pCurrentTopologyId
	);